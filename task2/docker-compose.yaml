# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3" так как это - самая свежая версия на момент написания этого кода.

version: "3"

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'.

services:

  # Как уже было сказано, мы собираемся создать клиентское и серверное приложения.
  # Это означает, что нам нужно два сервиса.
  # Первый сервис (контейнер): сервер.
  # Назвать его можно так, как нужно разработчику.
  # Понятное название сервиса помогает определить его роль.
  # Здесь мы, для именования соответствующего сервиса, используем ключевое слово 'server'.

  server:
 
    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # Здесь 'server/' соответствует пути к папке сервера,
    # которая содержит соответствующий Dockerfile.

    build: server/

    # Команда, которую нужно запустить после создания образа.
    # Следующая команда означает запуск "python ./server.py".

    command: ./server.sh
    restart: always

    # Вспомните о том, что в качестве порта в 'server/server.py' указан порт 1234.
    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    # В нашем случае нужно использовать порт компьютера 1234 и организовать его связь с портом
    # 1234 контейнера (так как именно на этот порт сервер 
    # ожидает поступления запросов).

    cap_add:
    - NET_ADMIN

    networks:
        network:
            ipv4_address: 88.88.1.0
    expose:
      - "1-65535"

  # Второй сервис (контейнер): клиент.
  # Этот сервис назван 'client'.

  client1:
    # Здесь 'client/ соответствует пути к папке, которая содержит
    # файл Dockerfile для клиентской части системы.

    build: client/

    # Команда, которую нужно запустить после создания образа.
    # Следующая команда означает запуск "python ./client.py".
 
    command: ./client.sh
    restart: always

    # Ключевое слово 'network_mode' используется для описания типа сети.
    # Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.

    networks:
        network:
          ipv4_address: 88.88.1.1
    expose:
      - "1-65535"

    # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
    # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
    # Нам нужно, чтобы сервис 'client' дождался бы готовности к работе сервиса 'server'.
 
    depends_on:
      - server

  client2:
    build: client/
 
    command: ./client.sh
    restart: always

    networks:
        network:
          ipv4_address: 88.88.2.2
    expose:
      - "1-65535"
 
    depends_on:
      - server

  client3:
    build: client/
 
    command: ./client.sh
    restart: always

    networks:
        network:
          ipv4_address: 88.88.3.3
    expose:
      - "1-65535"
 
    depends_on:
      - server

  client4:
    build: client/
 
    command: ./client.sh
    restart: always

    networks:
        network:
          ipv4_address: 88.88.4.4
    expose:
      - "1-65535"
 
    depends_on:
      - server

networks:
  network:
    ipam:
      config:
        - subnet: 88.88.0.0/16